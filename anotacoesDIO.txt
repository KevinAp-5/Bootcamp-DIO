java beans

Uma das maiores dificuldades na programação é escrever algoritmos legíveis a niveis que sejam compreendidos por todo seu time ou por você mesmo no futuro. Para isso, a linguagem java sugere, através de convenções, formas de escrita universaç para nossas classes, atributos, métodos e pacotes.

Variáveis
    Uma variável deve ser clara, sem abrevições ou definição sem sentido
    
    Uma variável é sempre no singular, exceto quando se referir a um array ou coleção.
    
defina um idioma único para suas variáveis. Se você for declarar variáveis em ingles, defina todas em ingles.

Métodos
    deverão ser nomeados como verbos, através de camelCase

------------------------------

Tipos de variáveis

Tipos primitivos(não são considerados objetos)

int, byte, short, long, float, double, boolean e char

Esses tipos não são considerados objetos, e portanto, representam valores brutos.

Eles são armazenados diretamente na pilha de memória(Memory stack).

final double salario = 6000.00

o final faz com que a variável fique imutável.
---------------------------------

Operadores

Simbolos especiais

Operadores aritméticos

+ - / *

simbolo de atribuição: simbolo de igual (=)

Operador de adição, quando utilizado em Strings, vai realizar a Concatenação

Operadores unários

Esses operadores são aplicados juntamente com outro operador aritmético. Eles realizam alguns trabalhos básicos como incrementar, decrementar, inverter valores numéricos e booleanos.

Operador unário de valor positivo - Números são positivos sem esse operadore explicitamente.

numero ++ -> Primeiramente a operação vai usar o valor atual do numero, e depois vai incrementar o valor dele, então isso pode poupar uma linha de código:

funcaoTal(numero++) > a função vai ter o valor da variável número, mas o compilador vai aumentar o valor da váriavel após a operação.

Caso a gente queira a incrementação antes da váriavel usar o número, a gente colocar o operador como pre-fixo. assim vai aumentar o valor dele, e o valor dele vai ser passado como referencia para a função:

funcaoTal(++numero) -> desse jeito, iremos incrementar o valor do número, e a função vai ter a váriavel número com seu valor incrementado.


negar váriavel booleana

boolean variavelFoda = true;

System.out.println(!variavelFoda); -> será printado no sistema false, mas o valor não será alterado em memória, apenas em tempo de execução para a função. Caso queiramos alterar para memória, iremos ter que usar o operador de atribuição

variavelFoda = !variavelFoda;

Dessa forma, conseguimos utilizar esse operador para termos o valor contrário do valor declarado.


Operador Ternário

Operador de condição ternária é uma forma resumida para definir uma condição, e escolher por um dentre dois valores. Você deve pensar numa condição ternária como se fosse uma condição IF normal, porém, de um forma em que toda a sua estrura escrita numa única linha

O operator ternário pelos símbolos: ?: utilizados na seguinte estrutura de sintaxe:

<expressão condicional> ? caso condição seja true> : <Caso consição seja false>

a==b ? "Verdadeiro" : "falso";


usuario.getNome().equals("joão") ? "Joao" : "não é joao";



--------------------------

Métodos

métodos são funções de classes. Devem ter nomes como verbos, e devem seguir o padrão de uma única responsabilidade.

------------------------

Scanner

nos exemplos anteriores, percebos que podemos receber dados digitados pelo usuário do nosso sistema, porém tudo precisa estar em uma linha e também é necessário informar os valores nas posições correpsondentes. Esta abordadem pode deixar margens de execução com erro do nosso programa. Para isso, com a finalidade de deixas a nossas entradas de dados mais seguras, agora vamos receber esses dados via Scanner.

A classe Scanner permite que o usuário tenha um interação mais assertiva com o nosso programa, veja como vamos mudar nosso Programa ao uso do objeto Scanner


public class AboutMe {
    public static void main(String[] args) {
        Scanenr scanner = new Scanner(System.in);
        
        System.out.println("Digite seu nome: ");
        String nome = scanner.nextLine();
        
        System.out.println("Seu nome é: " + nome");
}


---------------------

Estrutura condicional possibilita um fluxo dentro do código, a partir de verificações de condições.

Condição ternária

int nota = 7;

String resultado = nota >=7 ? "Aprovado" : "Reprovado";

outro resultado agora mais composto

String resultado = nota >= 7 ? "Aprovado":  nota >= 5 && nota < 7 ? "Prova recuperação" : "reprovado"

Dessa forma temos o mesmo fluxo de condição que um if composto, mas agora em menos linhas e deixando o código mais limpo.

--------------------------------

Hierarquia de exxceções

A Linguagem java dispões de uma variadade de classes que representam exceções, e estas classes são organizadas em uma hierarquia denominadas Checked and Unchecked Exceptions ou Exceções checadas e não checadas

trowable
    Error - Um erro brusco, onde a aplicação de fato não consegue sobreviver
    Exception - Caminho inesperado, um fluxo inesperado.
        RuntimeException
            NullPointerException
            NumberFormatException
            ClassCastException
            IndexoutOfBoundException
        
RuntimeException é uma subclasse de Exception

Exception por sí so tem suas Exceptions
    IOException
    SQLException
    MalformedURLException



O que determina uma exceção ser classificada como checada ou não checada?
É o risco dela ser disparada logo você precisa tratá-la


Pilha de execução de um programa Java/Stack Trace

Pilha de execução:
Toda invocação de método é empilhada em uma estrutura de dados que isola a área de memória de cada um. Quando um método termina(retorna), ele volta para o método que o invocou

Stack Trace:
É a matriz onde encontramos a pilha de execução da exceção. Em outras palavras, podemos dizer que o rastreamento da pilha busca(rastreio) para a próxima linha onde a exeção pode surgir.

Então as chamadas dos métodos ficam empilhadas.

------------------------
Conceito de OO

Precisamos entender que as linguagens cada vez mais vem se adequando ao cenário real, propocionando assim que o programar desenvolva algoritmos mais próximo do fluxo comportámental, logo tudo ao seu redor é representado como objetos.

Enquanto a programação estrutura é voltada a procedimento e funções definidas pelo usuário, a programação orientada a objetos é voltada a conceitos como o de classes e objetos


Classes

Toda a estrutura de código na linguagem java é distribuido em arquivos com extensão .java denominados de classe.

As classes existentes em nosso projeto serão compostas por:

Identificados, Características e Comportamentos.

Classe(class): a estrutura e ou representação que direciona a criação dos objetos de mesmo tipo.

Identificador(Identity): Propósito existencial aos objetos que serão criados

Características(states): Também conhecidos como atributos ou propriedades, é toda informação que representa o estado do objeto

Comportamentos(Behavior): Também é conhecido como ações ou métodos, é toda parte comportamental que um objeto dispõe

Instanciar(new): É o ato de criar um objeto a partir de estrutura definida em uma classe.

----------------------------

Seguindo algumas convenções, as nossas classes são classificadas como:

Classe de modelo(model): classes que representem estrutura de domínio de aplicação, exemplo: Cliente, Pedido, Nota Fiscal etc.

Classe de serviço (service): classes que contém regras de negócio e validação de nosso sistema.

Classe de repositório (repository): classes que contém uma integração com banco de dados.

Classe de controle(Controller): classes que possuem a finalidade de disponibilar alguma comunicação externa a nossa aplicação, tipo http web ou webservices.

Classe utilitária(util): classe que contém recrusos comuns a toda nossa aplicação.

--------------------------------

Pacotes

A linguagem java é composta por milhares de classes com as finalidades de por exemplo: Classes de tipos de dados, representação de texto, números, datadas, arquivos, e diretórios, conexão a banco de dados, entre outras. Imagina toda essas classes existirem em um único nível de documentos? E as classes desenvolvidas por nós, meros desenvolvedores de aplicações de vários os generios? imagina como ficaria esse diretório?

para previnir de ter um projeto desorganizado com todas as classes em apenas um diretório, a linguagem dispoe de um recruso que organiza as classes padrão e criada por nós, que conhecemos como pacote(package). Os pacotes são subdiretórios a partir da pasta src do nosso projeto, onde estão localizadas as classes da linguagem e novas que forem criadas par ao projeto. Existem algumas convenções para criação de pacotes ja utilizados no mercado.

Os pacotes são subdiretórios a partir da classe SRC do nosso projeto

Quando criamos um novo projeto em java, a pasta padrão é a pasta SRC, que por padrão qualquer classe que estiver lá, não vai precisar ter declarado que o pacote é package src; pois como é o diretório "raiz" do nosso código fonte, o java só vai colocar os packages do src em diante.

Então caso criarmos um package novo a partir de src.
src
    --- model
    
Ai a nossa classe vai ter apenas: package model;

-------------------------------------------

Modificadores de acesso

Modoficador public

Como o proprio nome representa, quando nossa classe, método e atributo é definido como public ,qualquer outra classe em qualquer outro pacote pode visualizar tais recursos.

---------------------------------

Método default, apenas o pacote da classe que foi declarado vai ter acesso



---------------------------

Enums

Emuns é um tipo especial de classe onde os objetos são previamente criados, imutáveis e disponíveis para toda aplicação

usamos enum, quando o nosso modelo de negócio contém objetos de memso contexto, que já existem de pré-estabelecidade, com a certeza de não haver alteração de valores.

Exemplos:

Grau de escolaridade: Analfabeto, fundamento, médio, Superior

Estado Civil, Solteiro, Casado, Divorciado, Viúvo

Estados brasileiro: SP, RJ, PI, MA

Não confunda uma lista de constantes com enum.

Enquanto que uma constante é uma variável de tipo com valor imutável, um enum, é um conjunto de objetos já pre-definidos na aplicação.

Como um enum é um conjunto de objetos, logo, esses objetos podem conter atributos e métodos.



public enum EstadoBrasileiro {
    SAO_PAULO("SP", "São Paulo"),
    RIO_JANEIRO("RJ", "Rio de Janeiro"),
    PIAUI("PI", "Piauí"),
    MARANHA("MA", "Maranhão");
    
    private  String nome;
    private String sigla;
    
    private EstadoBrasileiro(String sigla, String nome) {
        this.sigla = sigla;
        this.nome = nome;
    }
    
    public String getSigla() {
        return sigla;
    }
    
    public String getNome() {
        return nome;
    }
    
    public String getNomeMaiusculo() {
        return nome.toUpperCase();
    }
}

Os construtores dos enums são privados, assim o java vai a grosso modo fazer vários "news" objetos do nosso enum e deixar armazenado na memória para que possamos usar. Basicamente o construtor que agente tem dentro do enum é aquele que a gente declara os seus Atributos
Exemplo abaixo:

public enum EstadoBrasileiro {
    SAO_PAULO("SP", "São Paulo"), // basicamente já estamos chamando o construtor privado do enum aqui, e já declaramos os seus valores.
    RIO_JANEIRO("RJ", "Rio de Janeiro"),
    PIAUI("PI", "Piauí"),
    MARANHA("MA", "Maranhão");
    
    

--------------------------
UML

Linguagem dem odelagem Unificada ou UML é uma notação que possibilita a representação gráfica do projeto.

Na UML, temos tres conceitos necessários para compreendermos inicialmente:

Diagramas, elementos, relacionamento.

-------------------

As notações UML são distribuidás em duas categorias de diagramas, a estrutura e comportamental conforme listagem abaixo:

Diagramas Estruturais

    Digrama de classe: O Diagrama de classes é utilizado para fazer a representação de estruturas de classes de negócio, interfaces e outros componentes do sistema. Por esta característica, este diagrama é considerado o mais importante para a UML, pois auxilia a maioria dos demais diagramas.
    
    Diagrama de objetos: Este diagrama representa os objetos existente em um determinado isntante ou fato na aplicação. Assim, conseguimos ter uma perspectiva do estado de nossos objetos mediante a interação dos nossos usuários no sistema.
    

------------------------

Diagrama de classes

O diagrama de classes ilustra graficamente como classes serão estruturas e interligadas entre si diante da proposta do nosso software.

Em diagrama, a estrutura das classes é constituída por:

Identificação: Nome e/ou finalidade da classe

Atributos: Propriedades e/ou caracteristicas

Operações: Ações e/ou métodos

----
Relacionamentos

Em um diagrama, as classes podem existir de forma independente, mas obviamente, haverá em alguma etapa da aplicação, a necessidade de algumas se relacionarem, O que devemos compreender, é o nivel de dependencia entre ela:


Assosiação --

Uma assosiação, define um relacionamento entre duas classes, permitindo que um objeto tenha acesso a estrutura de um outro objeto.

ClasseA -----> ClasseB = Assosiação simples, navegação de A para B

ClasseA <-----> ClasseB = Assosiação Bidirecional

ClasseA <>----> ClasseB = Agregação
ClasseA <<>---> CLasseB = Composição

Agregação: Em uma agregação, a classe principal contem uma relação com outra classe, mas ela pode existir sem a classe agregadora. Imagina em um cadastro de Candidatos, podemos encontrar candidatos que ainda não possuam uma Profissão


Composição: A composição; já caracteriza uma dependencia existencial entre a classe principal e a classe associada. Imaginamos que uma Admissão só poderá existir contendo duas informações básicas e a composição do Candidato selecionado.

Admissão <<>-----Candidato = A aclasse admissao depende do Candidato, pois a classe Candidato compoe a admissão.

--------

Multiplicidade

Nem sempre um relacionamento entre as classes será de um para um, um determinado cenário poderá exigir multiplicidades específicar, conforme opções abaixo:

1. -> Representa uma associação CONTENDO UM ELEMENTO.
*. -> Representa uma associação CONTENDO UMA LISTA DE ELEMENTOS.
0..1 -> Representa uma associação CONTENDO ZERO OU UM ELEMENTO.
0..* -> Representa uma associação contendo zero ou uma lista de elementos.
1..* -> Representa uma associação contendo um ou uma lista de elementos.

---------
Visibilidade

Os atributos e métodos de uma classe podem receber níveis de visibilidade, e na UML, eistem símbolos que representam cada um deles.

(+) Visibilidade pública
(#) Visibilidade protegida (Muita associada com herança)
(-) Vissibilidade privada.

Representação.
-----------------------------------------
            Identificacao               |
-----------------------------------------
- AtributoPrivado: int                  |
# atributoProtegido: String             |
+ AtributoPublico: double               |        ---------------
---------------------------             | ----> |ClasseGenerica|
+ metodoSemRetorno(): void              |   1..* ---------------
+ metodoComRetorno(): String            |
+ metodoComParametro(param1: int): void | 
-----------------------------------------



--------------------------------------------

Pilares de POO


Quatro pilares da Orientação a Objetos

Encapsulamento: Nem tudo precisa estar visível, grande parte do nosso algoritmo pode ser distribuido em métodos, com finalidades específicas que ocmplementa uma ação em nossa aplicação.
Exemplo: Liga um veículo exige muitas etapas para a engenharia, mas o condutor so bisualiza a ignição, dar a partida e a "magia" acontece.

Herança: Características e comportamentos comuns podem ser elevados e compartilhados através de uma hierarquia de objetos.
Exemplo: um Carro e uma Motocicleta possuel Propriedades como chassi, ano de fabricação e métodos como acelerar, frear. Logo para não ser um processo de codificação redundante, podemos desfrutar da herança criando uma classe Veículo para que seja herdada por Carro e Motocicleta.

Abstração: É a indisponibilidade para determinar a lógica de um ou vários comportamentos em um objeto.
Exemplo: Veículo determina duas ações como acelerar e frear, logo, estes comportamenos deverão ser abstratos pois existem mais de uma maneira de se realizar a mesma operação.

Polimorfismo: São as inúmeras maneiras de se realizar uma mesma ação.
Exemplo: Veiculo determina duas ações como acelerar e frear, primeiramente precisamos identificar se estaremos nos referindo a Carro ou Motocicleta, Para determinar a lógica de aceleração e frenagem dos respectivos veículos.

----------------------------------------

quando estamos usando a herança e temos uma classe pai que para ser usada precisa de um construtor, precisamos que as classes filhas também tenha o construtor da nossa classe pai declarada, para que possamos usar os atributos da classe pai

---------------------------------------

Record conseguem trabalhar implementando interfaces, onde a record vai precisar obrigatóriamente implementar os métodos da interface.

As records, em contra-partida, não conseguem trabalhar com classes abstradas, pois as records só trabalham com atributos final, enquanto as classes abstratas não necessariamente tem todos seus atributos final, Devido a isso, as records permite apenas implementar as interfaces, pois as interfaces tem essa diferença da classe 

-----------------------------------------

Interfaces funcionais


a keyword default pode ser adicionada aos métodos da interface. O default foi implementado no java 8, para que você consiga gerar um método concreto dentro de uma interface, e fazer com que as implementações da interface não quebre, pois sempre que colocamos um método abstrato na intereface, as classes que estão implementando, são obrigadas a implementarem o método. Lembre-se, que as interfaces são como contratos que as classes devem seguir. Então o método default é uma forma de adicionar um método sem quebrar implementações, e também criar um método concreto dentro da interface.

Isso também, nada impede de fazermos um override do método default da interface, para que nossa classe implemente-o da maneira que quiser.

@FUncionalInterface -> essa anotação consegue ser inserida naquelas interfaces que queremos declarar como interfaces funcionais, essa anotação é mais para facilitar leitura

A interface funcional precisa ter um método normal(sem ser default), e ter quantos métodos default quiser.

----------------------------------
Quando temos uma váriavel de uma classe que é statico, esse valor vai ser compartilhado entre as instancias, então mesmo que eu crie várias intancias da mesma classe, o valor do static que eu definir vai ser a mesma referencia para todas.

Então é como se a nossa variável static é um atributo da classe em sí como entidade, e não das instancias.

--------------------------------------------------

Collection framwork API

Uma coleção(collection) é uma estrutura de dados que serve para agrupar muitos elementos em uma única udade, estes elementos precisão ser Objetos.

Uma collection pode ter coleções homogêneas e heterogêneas, normalmente utilizamos coleões hoogêneas de um tipo específico.

O núcleo principal das coleções é formado pelas interfaces da figura a baixo, essas interfaces permitem manipular a coleção independente do nível de detalhe que elas representam.

Temos quatro grandes tipos de coleçõe: List(lista), Set(conjunto), queue (fila) e map(mapa) a partir dessas interfaces, temos muitas subclasses concretas que implemental várias formas diferentes de se trabahar com cada coleção

As interfaces e classes são encontradas dentro do package java.util.

----------------

Generics Type

Um tipo genérico é uma classe genérica, ou uma interface que é parametrizada em relações a tipos.

A classe Box a seguir será modificada para demonstrar o conceito.

public class Box {
    private Object object
    public void set(Object object) {this.object = object};
    
    public Objecct get() {return object;}
}

o Simbolo<> é chamado de "diamon" ou "diamond operator" foi um recurso introduzido no java 7 e é usado no contexto de tipos genéricos em Java, para inferir automaticamente o tipo com base no contexto.


Para utilizar a classe Box com o generics, iremos colocar a declaração do tipo genérico alterando o código public class Box<T>

Isso introduz a variável do tipo T que pode ser usadas em qualquer lugar dentro da classe.

Dessa foram iremos tirar o Object, e iremos colocar o T

Uma váriavel de tipo pode ser qualquer tipo não primitivo que voce^especificar: qualquer tipo de classe, qualquer tipo de interface, qualquer tipo de arrays ou até mesmo outras váriavel de tipo.

Essa mesma técnica pode ser aplciada para criar interfaces genéricas.

Os nomes de paramentros mais comumentes usados são:

E - elemento (usado extensivamente pelo Java collectiosn framework)
K - chave
N - número
T - tipo
V - valor
S, U, C, etc..


----------------------------------------

Vantagens simples de usar generics nas interfaces collection em java

1 - Segurança de tipos de dados: O uso de generics garante que apenas objetos de um tipo específico possam ser adicionados a coleção, evitando erros de tipo e garantindo que você esteja lidando com os dados corretos.

2 - Código mais legível: Ao usar generics, você pode especificar o tipo de dados esperado ou retornado pela coleção, o que torna o código mais fácil de entender e ler.
 
3 - Detecta erros mais cedo: O compilador verificar se você está usando os tipos corretos durante a compiação, ajudando a identificar erros de tipo antes mesmo de executar o programa.

4 - Reutilização de código: Com generics, você pode criar classes e métodos genéricos que funcionam com diferentes tipos de coleções, evitando a necessidade de duplicar código para cada tipo especifico.

5 - Melhor desempenho: o uso de generics pode melhorar o desempenho, pois evita a necessidade de tipo desnecessários e permite que o compilador otimize o código com base no tipo especificado


------------------------


Comparable x Comparator - Entendendo essas duas interfaces

Comparable

- Comparable fornece uma única sequencia de ordenação. Em outras palavras, podemos ordenar a coçeão com base em um único elemento, como id, nome e preço

- Comparable afeta a classe original, ou seja, a classe atual é modificada.

- Comparable fornece o método compareTo() para ordenar elementos.

- Comparable está presente no pacote java.lang

- Podemos ordenar elementos da lista do tipo COmparable usando o método Collections.sort(List).

Por exemplo, temos uma classe de livro, onde vai ter nome do autor, nome do livro, e ano que foi lançado. Ao implementarmos a Interface comparable a ela, podemos ter uma lista do objeto livro, e podemor ordenar ela através de seus atributos.

Dessa forma, caso queiramos ordenar os livros através do ano de lançamento, nós podemos graças ao comparable, ou ordenar por nome, nós podemos.


------------------------

Comparator

- Comparator fornece o método compare() para ordenar elementos
- Comparator fornece múltiplas sequencias de ordenação. Em outras palabras, podemos ordenar a coleçao com base em múltiplos elementos, como id, nome, preço, etc.
- O comparator não afeta a classe principal, ou seja, a classe principal não é modificada
- Um comparator está presente no pacote java.util
- Podemos ordenar elementos da lista do tipo COmparator usando o método Collections.sort(List, Comparator), então podemos passar uma classe que vai implementar o método compare() da interface Comparator para o método Collections.sort(), onde essa classe vai implementar como se deve comparar os elementos!.

--------------------------------

// Classe para comparar Livro por ano

class CompararAno implements Comparator<Livro> {
    public int compare(livro livro1, Livro livro2) {
        if (livro1.getAno() < livro2.getAno())
            return -1;
        if (livro1.getAno() > livro2.getAno())
            return 1;
        else
            return 0;
    }
}


------------------------------------

Collections

A classe collections é uma classe utilitária do java para operações comuns em coleções
Ela fornece métodos para ordenação, busca, manipulação e sincronização de coleções.
O método sort é usado para ordenar uma lista em ordem ascendente.
O metodo sort em conjunto com Collections.reverseOrder() permite ornar em ordem descendente.


Então o comparator pode ser criado em uma classe que queremos que implemente o método compare, e podemos passar essa classe como parametro para servir de comparações no Collections.sort

Já o comparable, implementamos na nossa classe original, e agora teremos que implementar o método compareTo(Objecto instancia)
                                           titulo.compareTo(instan.titulo);
                                
                                
-------------------------------
LIST

A interface list é uma coleção ordenada que permitee a inclusão de elementos duplicados.

É um dos tipos de coleões mais utilziados em java, e as classes de implementação comum são Arraylist e LinkedList.

A list se assemelha a uma matriz com comprimento dinamico, permitindo adicionar ou remover elementos.

A interface list fornece métodos úteis para adicionar elementos em posições específicar, remvoer ou substituir elementos com base no indice e obter sublistas usando indices.

A classe collections fornece algoritmos úteis para manipula~ao de list. Como ordenação (sort) eembaralhamento(suffle), reversão(reverse) e busca binária (binarySearch).

Uma collection que implementar a interface List é a Vector, que é mais utilizada para programação concorrente, que é thread-safe.


ArrayList: O arrayList é uma implementação da interface List que armazena os elementos em uma estrutura de array redimensionável. Isso significa que ela pode crescer automaticamente a medida que novos elementos são adicionados. A principal vantagem do arraylist é o acesso rápido aos elementos por meio de indices, o que peprmite recuperar um elementos específico de forma eficiente. No entando, adicionar ou remover elementos no meio da lista pode ser mais lento, pois requer a realocação de elementos.

LinkedList: O linkedList é uma implementação da interface List que amareza os elementos em uma lista duplamente vinculada. Cada elementos contem referencias para o elemento anterior e proximo na lista. A principal vantagem do linked list é a eficiencia na adição ou remoção de elementos no inicio ou no final da lista, pois não é necessário realozar elementos. No entando, o acesso aos elementos por meio de indices é mais lento, pois requer percorrer a lista até o elemento desejado.

Vector: O vector é uma implementar antiga da interface list que é semelhante ao Arraylist, mas é sincronizada, ou seja, é thread-safe. isso signfica que várias threads podem manipular um objetor vector ao mesmo tempo sem causar problemas de concorrencia. No entanto, essa sincronização adiciona uma sobrecarga de desempenho, torncando o vector meno eficiente do que o arrayList em cenários em que a concorrencia não é um problema. Por esse motivo, o uso do vector é menos comum em aplicações modernas.

------------------------------------------------

Set

A interface set é uma coleção que não pode conter elementos duplicados.

Essa interface representa o conceito matemático de um conjunto e é usada para repreesentar conjuntos, como um baralho de cartas.

A 3 implementações mais famosas de Set: hashSet, Treeset e linkedhashSet

A interface set não permite acesso aleatório a um elemento na coleção.

Para percorrer os elementos de um set, você pode usar um iteerador ou um loop foreach

------------------------------------

Diferença das implementações de Set

HashSet: O hashset é uma implementação da interface set que armazea os elementos em uma tabela hash. Ele não mantém uma ordem específica dos elementos. A principal vantagem do hashset é que ele oferece um desempenho de busca muito eficiente, pois usa funções hash para indexar os elementos. No entanto, a ordem em que os elementos são adicionados pode não ser preservada ao percorrer do conjunto.

TreeSet: O treeSet é uma implementação da itnerface set que armazena os elementos em uma aŕvore binária balanceada. Isso significa que os elementos são armazenado em uma ordem classificada e são mantido automaticamente em ordem crescente. A principal vantagem do Treeset é que os elementos são sempre retornados na ordem classifica, o que facilita a obtenção de elementos em uma determinada ordem. No entanto, a buca e inserção são um pouco mais lentas em comparação ao hashSet, pois ao inserir e remover, a arvore tem que se balancear novamente caso necessário.

LinkedHashSet: O linkedHashSet é uma implementação da interface Set que mantém a ordem de inserção do elementos, além de usar uma tabela hash para obter um bom desempenho de busca, Ele é semelhante ao HashSet, mas também mantém uma lista duplamente vinculada que preserva a ordem de inserção. isso permite que os elementos sejam percorrido na ordem em que foram adicionados. O linkedHashSet é útil quando você quer manter a ordem da inserção dos elementos mas também ter um bom desempenho de busca.


------------------------------------------

Stream API

A streams APi é uma nova opão para manipuação de coleçoes em java seguindo os principios da programação funcional

Stream, Trata-se de uma poderosa solução para processar coleções de maneira mais declarativa, ao invés da tradicional forma imperativa

na forma imperativa para realizar uma soma simples, por exemplo: O desenvolvedor tem que se preocuár em não apenas com o que deve ser feitp em cada em elemento, isso é, com as regras associadas ao processametno dos emenetos da lista, mas também com a maneira de realizar essa iteração.

----------

Interfaces funcionais (interface que contem apenas um método abstrato)

-------
Lambda

As expressões lambda permitem reŕesentar interfaces funcionais (interfaces com um único método abstrato) de forma mais consisa e possibitam escrever código no estilo funcinal.

As interfaces funcionais desemprenham um papel crucial na programação funcional em Java, pois servem de base para o uso de expressões lambda.

Uma função lambda é uma função sem declaração, isso é, não é necessário colocar um nome, um tipo de retorno e o modificador de acesso. A ideia é que o método seja declarado no mesmo lugar em que será usado.

As funções lambda em Java tem a sintaxe definida como (argumento) -> (corpo)


--------------------------
Method reference

Method reference é um novo recurso do java 8 que permite fazer referência a um método ou construtor de uma classe (de forma funcional) e assim indicar que ele deve ser utilizado num ponto específico do código, deixando-a mais simples e legível.

Para utilizá-lo, basta informar uma classe ou referencia seguida do simbolo :: e o nome do método sem os parenteses no final


---------------------------------------
Functional interface

Qual interface com um SAM (Single Abstract method) é uma interface funcional e sua implementação pode ser tratada como expressões lambda.

--------------------------------
CONSUMER INTERFACE

Consumer<T>: Representa uma operação que aceita um argumento do tipo T e não retorna nenhum resultado. È utilizada principalmente para realizar ações ou efeitos colaterais nos elementos do Stream sem modificar ou retornar um valor.

Por exemplo: usar uma consumer para printar cada valor da stream.

-------------------

Supplyer INTERFACE

A supplier interface representa uma operação que não aceita nenhum argumento e retorna um resultado do tipo T.

É comumente usada para criar ou fornecer novos objetos de um determinado tipo.

Supplier<String> mensagem = () -> "Olá, seja bem-vindo";

O método generate recebe um supplier
Stream.generate(mensage)
.limit(5)
.collect(Collectors.toList());


----------------------------------

FunctionInterface

Representa uma função que aceita um argumento do tipo T e retorna um resultado do tipo R.

É utilizada pra transformar ou mapear os elementos do Stream em outros valores ou tipos.

Exemplo: Usar a Function com expressão lambda para dobrar todos os números

Function<integer, Integer> dobrar = numero -> numero * 2;

podemos usar essa function no método .map() do stream()


---------------------------------------

Predicate Interface

Representa uma função que aceita um argumento do tipo T e retorna um valor booleano (verdadeiro ou falso).

É comumente usado para filtrar os elementos do stream com base em alguma condiçao.

Exemplo: criar um predicate para verificar se a palavra tem mais de 5 caracteres

Predicate<String> filtro = palavra -> palavra.length() -> 5;

Então podemos aplicar o nosso Predicate armazenado na variável filtro, no método .filter() do stream().

Podemos criar predicates para filtrar a coleção a partir de uma função que vai retornar verdadeiro e falso através de uma condição.

----------------------------------------

BinaryOperator interface

Representa uma operação que combina dois argumentos do tipo T e retorna um resultado do mesmo tipo T.

É usada para realizar operaões de redução em pares de elementos, como somar números ou combinas objetos.

Exemplo de uso: usar o BinaryOperator com expressão lambda para sobar dois números inteiros.

BinaryOperator<Integer> somar = (num1, num2) -> num1 + num2;

Pode ser utilizada no método .reduce() do stream()

o método reduce vai ter dois argumentos(identity: int, BinaryOperator<T>)

O primeiro método identity, ele vai ser usado para saber o ponto de partida do laço de repetição que vai ser aplicado pelo reduce.

vai representar como se fosse a variável temporária que é declarada dentro do laço for: for(int x = 0....)

Essa variável vai ter o mesmo princípio.

O segundo parametro do método .reduce é o nosso BinaryOperator que vai ser aplicado para os elementos da coleção.

-------------------------

Mais métodos streams

As operações Stream API pode ser classificada em duas categorias principais:

Operações intermediárias: são aquelas que retornam uma nova Stream e permite encadear várias operações, formando um pipeline de processamento de dados. São elas:

- Filter(Predicate<T> predicate): Filtra os elementos da Stream com base em um predicado. Retorna uma nova Stream contendo apenas os elementos que atendem ao critério do Predicado(operação que resulta em booleano). Exemplo: stream.filter(n -> n.size() < 100)

- Map(Function<T, T> mapper): Transforma cada elemento da Stream usando a função específicada e retorna uma nova Stream contendo os elementos resultantes. Exemplo: stream.map(s -> s.toUpperCase()) ou stream.map(Integer::intValue)

- sorted(): Classifica os elementos da Stream em ordem natural (se os elementos forem comparáveis) ou de acordo com o comparator fornecido: stream.sorted()

- distinct(): Remove elementos duplicados da Stream, considerando a implementação do método equals() para comparação: Exemplo: stream.distinct()

- limit(long maxSize): Limite o número edelementos da stream ao maxSize primeiros elementos: Exeplo: stream.distinct()

- skip(long n): Pula os primeiros n elementos da Stream e retorna uma nova Stream sem eles: exemplo: stream.skip(10)


Segunda categoria de operações de Stream Api

Operações Terminais: São aquelas que enceerram o pipeline e produzem um resultado final:

ForEach(Consumer<T> action): Executa uma ação para cada elemento da stream: exemplo: stream.forEach(System.out::println)

toArray(): Converte a Stream em um array contendo os elementos da stream .toArray()

collect(Collector<T, A, R> collector): Coleta os elementos da sTream em uma estrutura de dados específica, como uma lista ou um mapa: .collect(Collectors.toList())

count(): retorna o número de elementos da Stream() .count()

anyMatch<Predicate<T> predicate): Verifica se algum elemento da Stream atende ao preedicado especificado
stream.anyMatch(s -> s.startsWith("A"))

allMatch(Predicate<T> predicate): Verifica se todos elementos da Stream atendem ao predicado .allMatch(n -> n != null)

noneMatch(Predicate<T> predicate): Verifica se nenhum elemento da stream atende ao predicado .noneMatch(s -> s.isEmpty())

min(Comparator<T> comparator) e max(Comparator<T> comparator): Encontra o elemento minimo e máximo da Stream, respectivamente de acordo com o comparador fornecido.

reduce(T identity, BinaryOperator<T> accumulator): COmbina os elementos da Stream usando o acumulador específicado e retorna o resultado final: exemplo: stream.reduce(o, (a, b) -> a + b)

-------------------------------

Optional

o objeto da classe Optional no java é fornecer uma abordagem mais segura e expressiva para tratar caso em que um valor pode ser ausente (nulo). Ela foi introduzida a partir do java 8 para evitr o temido NullPointerException(NPE) que é comum quando se trabalha com referencias nulas. Optional permite encapsular um valor que pode ser nulo dentro de um objeto optional. Isso indica explicitamente que o valor pode ou não estar presente e requer um código que deseja acessá-lo faça uma verificação explicita.

- of(value): criar um Optional contendo o valor fornecido. Se o valor for nulo, lançara uma exceção nullPointerException.

Optional<String> optionalValue: Optional.of("hello");
System.out.println(optinalValue.get());

- ofNullable(value): Cria um optional contendo o valor fornacido, mas permite que o valor seja nulo

String nullValue = null;
Optional<String> optinalValue = Optional.ofNullable(nullValue);

- empty(): Retorna um Optional Vazio (sem valor);

- isPresent(): Verifica se o optional contém um valor não nulo

- isEmpty(): a partir do java 11 verifica se o Optional está vazio(não contem um valor não nulo.

- get(): obtem o valor contido no Optional. Se o valor for nulo, lançar[a uma exeção noSuchElement

- orElse(defaultValue): Obtém um valor contido no Optinal, ou retorna um valor padrão se o optional estiver Vazio

- orElseGet(supplier) obtem o valor contido no optional, ou retorna um valr fornecido por um supplier de o Optinal estiver vazio

- orElseThrow(exceptionSupplier): Obtém um valor contido no Optinal, ou lança uma exceção fornecida no supplier se o Optinal estiver vazio.

- ifPresent(consumer): Executa uma ação fornecida por um consumer se o optinal contiver um valor.



------------------------------------
Explorando os pilares da orientação a objetos com java

Domínio/problema

COnsiderando nosso conhecimento no dominio bancário, iremos abstrair uma solução Orientada a objetos em java, para isso vamos interpretar o seguinte cenário

"Um banco oferece aos seus clientes dois tipos de contas (corrente e poupança), as quais possuem as funcionalidade de depósito, saque e transferencia (entre contas da própria instituição).


-------------

Pilares da OO

Abstração

Habilidade de concentrar-se nos aspectos essenciais de um domínio, ignorando características menos importante ou acidentais.


Encapsulamento

Encapsular significa esconder a implementação dos objetos, criando assim interfaces de uso mais concidas e fáceis de usar/entender. O encapsulamento favorece principalmente dois aspectos de um sistema: A manutenção e evolução.


herança

Permite que você defina uma classe filha que reutiliza (herda), estende ou modifica o comportamento de uma classe pai. A classe cujos membros são herdados é chamada de classe base. A class que herda os membros da classe base é chamada de classe derivada.


public interface IConta {
    void sacar(double valor);
    
    void depositor(double valor);
    
    void transferir(double valor, Conta contaDestino);

}




Polimorfismo

Capacidade de um objeto poder se referenciado de várias forma, ou seja, é a capacidade de tratar objetos criados a partir de classes específicas como objetos de uma classe genérica.

Cuidado, o polimorfismo não quer dizer que o objeto fica se transformando, muito pelo contrário, um objeto nasce de um tipo e morre daquele tipo, o que pode mudar é a maneira como nos referismo a ele.










---------------------------------------

Oque são microserviços?

Uma abordagem arquitetural onde a aplicação é dividida em pequenos serviços

Cada serviço é responsável por um funcionalidade;


------------------------

Diferenças entre monolito e microserviços

Monolito
    Aplicação está unificada em um único codigo-fonte, banco de dados e deployment;
    Eficiente para sistemas menores (é qoeu todos pensagem);
    Manutenção pode ser complexa caso o sistema cresça;
    
Microserviços
    Aplicação dividida em vários serviços pequenos e independentes;
    Facilita o desenvolvimento, escalabilidade e o deploy;
    Porém, essa abordagem traz desafios e complexidade operacional.
    

--------------------
benefícios dos microserviços

Esalabilidade independentes: Podemos aumentar a escalabilidade de apenas um serviço sem precisar escalar a aplicação inteira;

Resiliencia: uma falha em um serviço não compromete todo o sistema;

Time de desenvolvimento: pode trabalhar em serviços diferentes de forma simultanea, acelerando o desenvolvimento.

--------------------------

Desafios dos microserviços

Comunicação entre serviços:
    Latência e falhas inesperadas
    
Gerenciamento de estados e banco de dados;

Segurança precisa ser reforçada;

Complexidade operacional(Infraestrutura);


----------------------------------

O que é rabbitMQ

message broker de código aberto baseado no protocolo AMQP;

Atua como intermediário entre serviços;

Permite comunicação assincrona por meio de mensageria



------------------------------------------------------


Spring framework

É um framework open source desenvolvido para a plataforma java baseado nos padrões de projetos inversão de controle e injeção de dependencia.

Sua estrutura é compostoa por módulos afins de reduzir a complexidade no desenvolvimento aplicações simples ou corporativa.

beans são objetos gerenciados pelo Core Container

----------------------------
Spring vs java EE

Olhando um pouco a história, há muito tempo através, o java EE era realmente muito complicado e nem era necessário entrar numa discussão, usar o Spring era um caminho mais simples e mais fácil de evoluir. Aí chegou a versão 5 do java EE e a discussão voltou a ficar um pouco mais quente.


---------------------

inversão de controle

Inversion of Control ou Ioc, trata-se do redirecionamento do fluxo de execução de um código retirando parcialmente o controle sobre ele e delegando-o para um container.

O principal propósito é minimizar o acoplamento do código.


Então no spring, o Ioc é um princpio que trnasfere o controle da criação e gestão de objetos para um conteiner (Spring Ioc container), permitindo que as dependencias sejam injetadas, em vez de serem criadas internamente.

Em detalhe:
O que é Ioc
    IoC é um padrão de design que inverte o controlo da criação e gestão de objetos e passando essa responsabilidade para um conteiner.
    
    Em vez da classe criar suas proprias dependencias, o Ioc faz com que as dependencias sejam injetadas na classe, o que resuulta em um código mais modular e testável.

Como funciona no spring?
    O spring IoC conteinar é responsável por gerenciar a criação e o ciclo de vida das classes (beans) da aplicação.
    
    As dependencias são injetadas nos benas através de construtores, métodos setters, ou campos, dependendo da configuração.
    
    
    O Spring IoC container resolve as dependencias automaticamente, garantindo que as classes recebam as instancias necessárias para funcionar.
    
Benefícios da IoC:

Baixo acoplamento: As classes ficam menos dependentes entre si, tornando o código mais flexível e facil de manter

Facilidade de teste: as dependencias podem ser facilmente subtituidas por mocks durante os testes, permitindo testes mais eficiencintes

Reutilização de código: O código se torna mais modular e pode ser reutilizado em diferentes partes da aplicação.


Sem o IOC, a gente tem que criar o objeto, para que possamos utilizado, essa é forma tradicional do Java EE

Com o IOC, a gente gente tem o container que vai ser responsável pela criação desses objetos, deixando essa questão abstrata para o programador, e facilitando no desenvolvimento de software.


Injeção de dependencia:


A injeção de dependencia é um padrão de desenvolvimento com a finalidade de manter baixo o nível de acoplamento entre módulos de um sistema.

A Inversão de controle, que está fortemente relacionada a injeção de dependencia, o nosso código fica menos acoplado, e dependendo menos de implementações.

Por exemplo: podemos ter uma interface, que vai ser usado como referencia para que possamos estar desenvolvendo nossa classe. Ou seja, iremos estar injetando uma interface, e não iremos nos preocupar com implementações.


-------------------

beans: objeto que é instanciado (criado), montado e gerenciado por um container através do princípio da inversão de controle.

bean é um objeto que vai ser mantido, gerenciado, criado por pelo container do spring.

Escopos:

Singleton -> Um mesmo objeto, vai ser utilizado por toda a aplicação, sem ter a necessidade de diversas instancias diferentes.

Prototype -> É criado uma nova instancia a cada requisição deu um objeto. Então o container vai entender, de que não vai mandar a mesma instancia de um objeto, para camadas diferentes da aplicação.

Http (request, session, global)


Singleton:

O container do Spring IoC define apenas uma instancia do Objeto.

ProtoType: 

Será criado um novo objeto a cada solicitação ao container..


Http - Request:

Um Bean será criado para cada requisição Http

Os objetos existirão enquanto a requisição estiver em execução.

Http - Session

Um bean será criado para a sessão do usuário.

Precisamos acessar a mesma solicitação duas vezes para testar os escopos específicos da web.

Http - Global

Application Global Scope cria um bean para o ciuclo de vida do contexto da aplicação. Objetos compartilhados por toda a aplicação.



---------------------

Autowired:

Uma anotação (indicação) onde deverá ocorrer uma injeção automática de dependencia.

- byName: É buscado um método set que corresponde ao nome do bean.
- byType: É considerado o tipo da classe para inclusão do bean;
- byConstructor: usamos o construtor para incluir a dependencia.

---------------------------------------------

Conhecendo o Spring boot

Enquanto o spring framework é baseado no padrão de injeção de dependencias, O springboot foca na configuração automática.

O Spring boot é muito útil para produtividade, pois deixa a necessidade de perder tempo com configurações.

--------------------
Antes do Spring boot

Desafios com configuração do projeto.

- Dependencia individual
- Verbosidade
- Incompatibilidade de versões
- Compelxidade de gestão
- Configurações complexas e repetitivas.

-------------------------------

A grande sacada do spring boot, é os starters, onde você seleciona exatamente o que você precisa para o seu projeto, e não precisa se preocupar em configura-los

Dado que a maior parte das configurações necessárias para o inicio de um projeto são sempre mas mesmas, por que não iniciar um projeto com todas estas configurações já definidas.

Starters -> Descritor de dependencia.

Então o starter vai encapsular várias dependencias, então você não vai precisar adicionar todas as dependencias de uma biblioteca, você só precisa adicionar qual dependencia precisa, e logo todas serão adicionadas.

Benefícios

- Coesão
- Versão compatível
- Otimização do tempo
- Configuração simples
- Foco no negócio.

----------------------
Quem são eles?

Quando usar @bean?
Quando usar @component?
Implementar a Ioc e DI

levando em conta que tudo é beans no contexto do spring, quando iremos usar as anotações bean e a component?

Uma dica chave: component -> componentes que serão escaneados na aplicação -> quando temos acesso ao código fonte na aplicação.

Com isso, podemos injeta-lo em qualquer eco sistema do spring.

Bean -> não é uma implemetnação, não é uma classe, não é algo que podemos ter acesso no código fonte, mas declaramos ele como bean para que o spring gerencie

------------------------------------


Singleton ou ProtoType

 @Scope("prototype")
 
 
-------------------------------

Properties Value

@Value
Default value

É bastante usado para quando querermos manter uma persistencia das informações que serão usadas na nossa aplicação, e também para usar váriaveis de ambiente.

@Value("${}")


----------------

ConfigurationProperties

@ConfigurationProperties(prefix)

Podemos ter um componente onde ele vai estar atrelado a algumas configurações do ApplicationProperties

exemplo de arquivo properties:

remetente.nome=joao
remetente.email=joao@ghmail.com
remetente.telefone=1113913931L

Podemos criar um componente, onde seus atributos vão ser automaticamente atributos com os valores da properties, Utilizando a anotação @ConfigurationProperties

E a anotação@ConfigurationProperties, existe um atributo de prefixo, onde definimos o prefixo que vai ser usado para captar os valores da properties.

@ConfigurationProperties(prefix = "remetente")


----------------------------

O que é ORM

Object-Relational Mapping, Em portugues, mapeamento objeto-relacional, é um rescurso para aproximar o paradigma da orientação de objetos ao contexto de banco de dados relacional.

O uso da ORM é realizado através do mapeamento de objeto para uma tabela por uma biblioteca ou framework

JPA é uma especificação baseada em interfaces, que através de um framework realiza operações de persistencia de objetos em java

Implementações do JPA

Hibernate, eclipse link, Top link, Open Jpa

Mapeamento

Vamos conhecer os aspectos das anotações de mapeamento do jpa

Identificação

Definição
Relacionamento
Herança
Persistencia


-------------------------

Spring data Jpa

O spring data jpa adiciona uma camada sobre o JPA. Isso significa que ela usa todos os recursos definidos pela especificação JPA, especialmente os mapeamentos de entidade e os recursos de persistencia baseado em interfaces e anotações. Por isso, O spring data Jpa adiciona seus próprios recursos, como uma implementação sem código do padrão de reposítorio e criação de consultas de banco de dados a partir de nomes de métodos

Então com o spring data jpa, as nossas interações com o banco de dados será através da herança de interfaces e declara~oes de métodos com anotações.

Existem algumas interfaces e anotações que são super relevantes de se explorar como:

Interfaces:
    CrudRepository
    JPARepository
    PagingAndSortingRepository

Anotações
    @Query
    @Param
    

-------------------------

Repository Pattern

Repository pattern é um padrão de projeto similar ao DAO (Data acess object) no sentido de que seu objetivo é abstrair o acesso a dados de forma genérica a partir do seu modelo.

Spring Data Jpa
    O spring Data Jpa facilita a implementação do padrão Repository através do AOP (Aspect Oriented Programming)
    
Então o Spring data jpa vai nos gerar dinamicamente a implementa~ao de vários métodos de acesso a dados. Então estender a interface JpaRepository vai nos fornecer já vários métodos de crud, sem precisar implementar todos eles.


save, findByid, existsById, findAll, delete, count: todos esses são métodos que são fornecidos automaticamente pelo framework.

----------------------------

O que é uma API, é um código programável que faz a "ponte" entre duas aplicações distintas.

REST e RESTful

A API REST (representational state transfer) é como um guia de boas práticas e RESTful é a capacidade de determinado sistema aplicar os princípios rest.


Para que uma arquitetura seja RESTful é necessário ter uma série de principios ou padroes.

Cliente-servidor - Significa aprimorar a partabilidade dentre várias plataformas de interface do usuário e do servidor. Permitindo uma evolução independente do sistema


Interface uniforma - representa uma interface uniforme entre cliente e servidor. Para isso é preciso ter uma interface que identifique e presente recursos, mensagens autodescritivas, bem como hypermedia (HATEOAS)

stateless - indica que cada interação via API tem acesso a dados completos e compreensíveis.

cache - necessário para reduzir o tempo médio de resposta, melhorar a eficiencia.

camadas - permite que a arquitetura seja menos complexa e altamente flexivel.


-------------------------------

Nível de maturidade

para padronizar e facilitar o devenvolvimento de api's REST, leonard richardson propes um modelo de maturidade para esse tipo de api, definindo em 4 niveis

LEVEL 3: Hypermidia control
level 2: HTTP verbs
Level 1: recources
Level 0: the swamp of POX

HATEOAS

HATEOAS significa Hypermedia as the engine of application state. Uma API que implementa esse nivel fornec3e aos seus clientes links que indicarão como poderá ser feita a navegação entre seus recursos. Ou seja, quem for consumir a API precisará saber apenas a rota principal e a resposta dessa requisição terá todas as demais rotas pssíveis.


Controller

Controller é um recurso que disponibiliza as funcionalidade de négocio da aplicação através do protocolo HTTP. Vamos criar uma classe de exemplo:


Rest Controller

Um rest controller em Spring nada mais é que uma classe contendo anotações específicar para dispolibilização de recursos https baseados em nosso serviços e regras de negócios.


Swagger

Configurando Documentação em uma API com swagger


------------------------------

Exception handlers

Tratamento de exceções no spring boot


Nossas aplicações precisam ser resilientes a possíveis comportamentos inesperados baseados na proposta de negócio e falando de recursos HTTPs, realizamos implementaçõesq ue centralizam e gerenciam esse tipo de tratamento de exceções.

Exception Handler

Um manipulador de exceção é o código que estipula o que um programa fará quando um evento anomalo interromper o fluxo normal das instruções desse programa.

Solução 1- Exception Handler

A primeira solução funciona a nivel do @Controller, onde cada método trata uma exceção de forma declarativa com o @ExceptionHandler(minhaException.cass)

@ResponseStatusExceptionResolver

Sua principal responsabilidade é usar a anotação @ResponseStatus disponível em exceções personalizada e mapear essas exeções de status http.


RestControllerAdvice

O spring 3.2 traz um suporte para o exceptionHandler global com a anotação @ControllerAdvice

A anotação ControllerAdvice nos permite consolidar nossos múltiplos @Exceptionhandlers espalahaos de antes, em um único componente global para tratamento de erros.

Isso nos dá controle total sobre o corpo da resposta, bem como o código de status

Isso nos dá controle total sobre o corpo da resposta, bem como o código de status
Ele fornece o mapeamento de várias exceções ao mesmo método, para serem tratas em conjunto
Ele faz bom uso da resposta RESTful ResponseEntity mais recente.


--------------------

Introdução

Spring security é apenas um grupo de filtros de servlet que ajudam você a dicionar autenticação e autorização ao seu aplicativo da WEB.


Autenticação: refere ao processo de verificação de identidade de um usuário, com base nas credenciais fornecidas. Um exemplo comum é inserir um nome de usuário e uma senha ao fazer login em um site. Você pode pensar nisso como uma resposta a pergunta: Quem é você?

Autorização: Se refere ao processo de determinar se um usuário tem permissão adequada para executção uma açlão específica ou ler dados específico, supondo que o usuário seja autenticado com exito. Você pode pensar nisso como uma resposta à pergunta Um usuário pode fazer / ler isso?

Princípio/principle: refere-se ao usuário autenticado no momento.

Autoridade concedida refere-se à permissão do usuário autenticado.

Função refere-se a um grupo de permissões do usuário autenticado.

--------------------

Para habilitar a segurança ao nosso projeto spring, precisamos incluir a dependencia no pom.xml do spring security

spring-boot-start-security /artifactId>


Default

O spring securiy possui um usuário padrão chamado user e toda vez que a sua aplicação é iniciada, ele gera uma senha aleatória no console.

--------


Autenticação simples


Existe uma maneira da gente realizar uma autenticação simples do spring, não é recomendada, mas podemos saber que ela existe

No aplication properties, iremos colocar as seguintes anotações

spring:
    security:
        user:
            name = user
            password = user123
            roles = USERS

Dessa forma a gente consegue gerar uma autenticação com um login e senha

-------------------------------

UserDetailsService

A interface UserDetails service é usada pra recuperar dados relacionados ao usuário. Ele possui um método denominado loadByUsername() que pode ser substrituido para personalizar o processo de lcoalização do usuário


-------------------------------

Explorando padrões de projetos design patterns


O que são design patterns

São soluções consolidadas para problemas recorrentes no desenvolvimento e manutenção de software orientado a objetos.

São comumentes classificados nas seguintes categorias

Padrões criacionais: Abstract Factory, Builder, Factory method, Prototype, Singleton.

Padrões comportamentais: Chain of Responsibility, Iterator, Observer, Stategy, template method.

Padrões Estruturais: Adapter, bridge, Composite, Decorator, Facada, Flyweight, Proxy.

----------------------------------
Padrão criacional
Singleton

Permitir a criação de uma única instâNcia de uma classe e fornecer um modo para recuperá-la.


----------------------------------
Padrão comportamental
Strategy

Simplificar a variação de algoritmos para a resolução de um mesmo problema.

----------------------------------
Padrão estrutural
Facade

Prover uma interface que reduza a complexidade nas integrações com subsistemas


-----------------------------

Spring framework

Explorando alguns padrões de projetos com Spring:

Singleton: @Bean e @Autowired

Strategy: @Service e @Repository

Facade: construiremos uma API REST com o mesmo objetivo desse padrão, abstrair a compelxidades das seguintes integrações: Spring data JPa e ViaCEP(Feign).





