java beans

Uma das maiores dificuldades na programação é escrever algoritmos legíveis a niveis que sejam compreendidos por todo seu time ou por você mesmo no futuro. Para isso, a linguagem java sugere, através de convenções, formas de escrita universaç para nossas classes, atributos, métodos e pacotes.

Variáveis
    Uma variável deve ser clara, sem abrevições ou definição sem sentido
    
    Uma variável é sempre no singular, exceto quando se referir a um array ou coleção.
    
defina um idioma único para suas variáveis. Se você for declarar variáveis em ingles, defina todas em ingles.

Métodos
    deverão ser nomeados como verbos, através de camelCase

------------------------------

Tipos de variáveis

Tipos primitivos(não são considerados objetos)

int, byte, short, long, float, double, boolean e char

Esses tipos não são considerados objetos, e portanto, representam valores brutos.

Eles são armazenados diretamente na pilha de memória(Memory stack).

final double salario = 6000.00

o final faz com que a variável fique imutável.
---------------------------------

Operadores

Simbolos especiais

Operadores aritméticos

+ - / *

simbolo de atribuição: simbolo de igual (=)

Operador de adição, quando utilizado em Strings, vai realizar a Concatenação

Operadores unários

Esses operadores são aplicados juntamente com outro operador aritmético. Eles realizam alguns trabalhos básicos como incrementar, decrementar, inverter valores numéricos e booleanos.

Operador unário de valor positivo - Números são positivos sem esse operadore explicitamente.

numero ++ -> Primeiramente a operação vai usar o valor atual do numero, e depois vai incrementar o valor dele, então isso pode poupar uma linha de código:

funcaoTal(numero++) > a função vai ter o valor da variável número, mas o compilador vai aumentar o valor da váriavel após a operação.

Caso a gente queira a incrementação antes da váriavel usar o número, a gente colocar o operador como pre-fixo. assim vai aumentar o valor dele, e o valor dele vai ser passado como referencia para a função:

funcaoTal(++numero) -> desse jeito, iremos incrementar o valor do número, e a função vai ter a váriavel número com seu valor incrementado.


negar váriavel booleana

boolean variavelFoda = true;

System.out.println(!variavelFoda); -> será printado no sistema false, mas o valor não será alterado em memória, apenas em tempo de execução para a função. Caso queiramos alterar para memória, iremos ter que usar o operador de atribuição

variavelFoda = !variavelFoda;

Dessa forma, conseguimos utilizar esse operador para termos o valor contrário do valor declarado.


Operador Ternário

Operador de condição ternária é uma forma resumida para definir uma condição, e escolher por um dentre dois valores. Você deve pensar numa condição ternária como se fosse uma condição IF normal, porém, de um forma em que toda a sua estrura escrita numa única linha

O operator ternário pelos símbolos: ?: utilizados na seguinte estrutura de sintaxe:

<expressão condicional> ? caso condição seja true> : <Caso consição seja false>

a==b ? "Verdadeiro" : "falso";


usuario.getNome().equals("joão") ? "Joao" : "não é joao";



--------------------------

Métodos

métodos são funções de classes. Devem ter nomes como verbos, e devem seguir o padrão de uma única responsabilidade.

------------------------

Scanner

nos exemplos anteriores, percebos que podemos receber dados digitados pelo usuário do nosso sistema, porém tudo precisa estar em uma linha e também é necessário informar os valores nas posições correpsondentes. Esta abordadem pode deixar margens de execução com erro do nosso programa. Para isso, com a finalidade de deixas a nossas entradas de dados mais seguras, agora vamos receber esses dados via Scanner.

A classe Scanner permite que o usuário tenha um interação mais assertiva com o nosso programa, veja como vamos mudar nosso Programa ao uso do objeto Scanner


public class AboutMe {
    public static void main(String[] args) {
        Scanenr scanner = new Scanner(System.in);
        
        System.out.println("Digite seu nome: ");
        String nome = scanner.nextLine();
        
        System.out.println("Seu nome é: " + nome");
}


---------------------

Estrutura condicional possibilita um fluxo dentro do código, a partir de verificações de condições.

Condição ternária

int nota = 7;

String resultado = nota >=7 ? "Aprovado" : "Reprovado";

outro resultado agora mais composto

String resultado = nota >= 7 ? "Aprovado":  nota >= 5 && nota < 7 ? "Prova recuperação" : "reprovado"

Dessa forma temos o mesmo fluxo de condição que um if composto, mas agora em menos linhas e deixando o código mais limpo.

--------------------------------

Hierarquia de exxceções

A Linguagem java dispões de uma variadade de classes que representam exceções, e estas classes são organizadas em uma hierarquia denominadas Checked and Unchecked Exceptions ou Exceções checadas e não checadas

trowable
    Error - Um erro brusco, onde a aplicação de fato não consegue sobreviver
    Exception - Caminho inesperado, um fluxo inesperado.
        RuntimeException
            NullPointerException
            NumberFormatException
            ClassCastException
            IndexoutOfBoundException
        
RuntimeException é uma subclasse de Exception

Exception por sí so tem suas Exceptions
    IOException
    SQLException
    MalformedURLException



O que determina uma exceção ser classificada como checada ou não checada?
É o risco dela ser disparada logo você precisa tratá-la


Pilha de execução de um programa Java/Stack Trace

Pilha de execução:
Toda invocação de método é empilhada em uma estrutura de dados que isola a área de memória de cada um. Quando um método termina(retorna), ele volta para o método que o invocou

Stack Trace:
É a matriz onde encontramos a pilha de execução da exceção. Em outras palavras, podemos dizer que o rastreamento da pilha busca(rastreio) para a próxima linha onde a exeção pode surgir.

Então as chamadas dos métodos ficam empilhadas.

------------------------
Conceito de OO

Precisamos entender que as linguagens cada vez mais vem se adequando ao cenário real, propocionando assim que o programar desenvolva algoritmos mais próximo do fluxo comportámental, logo tudo ao seu redor é representado como objetos.

Enquanto a programação estrutura é voltada a procedimento e funções definidas pelo usuário, a programação orientada a objetos é voltada a conceitos como o de classes e objetos


Classes

Toda a estrutura de código na linguagem java é distribuido em arquivos com extensão .java denominados de classe.

As classes existentes em nosso projeto serão compostas por:

Identificados, Características e Comportamentos.

Classe(class): a estrutura e ou representação que direciona a criação dos objetos de mesmo tipo.

Identificador(Identity): Propósito existencial aos objetos que serão criados

Características(states): Também conhecidos como atributos ou propriedades, é toda informação que representa o estado do objeto

Comportamentos(Behavior): Também é conhecido como ações ou métodos, é toda parte comportamental que um objeto dispõe

Instanciar(new): É o ato de criar um objeto a partir de estrutura definida em uma classe.

----------------------------

Seguindo algumas convenções, as nossas classes são classificadas como:

Classe de modelo(model): classes que representem estrutura de domínio de aplicação, exemplo: Cliente, Pedido, Nota Fiscal etc.

Classe de serviço (service): classes que contém regras de negócio e validação de nosso sistema.

Classe de repositório (repository): classes que contém uma integração com banco de dados.

Classe de controle(Controller): classes que possuem a finalidade de disponibilar alguma comunicação externa a nossa aplicação, tipo http web ou webservices.

Classe utilitária(util): classe que contém recrusos comuns a toda nossa aplicação.

--------------------------------

Pacotes

A linguagem java é composta por milhares de classes com as finalidades de por exemplo: Classes de tipos de dados, representação de texto, números, datadas, arquivos, e diretórios, conexão a banco de dados, entre outras. Imagina toda essas classes existirem em um único nível de documentos? E as classes desenvolvidas por nós, meros desenvolvedores de aplicações de vários os generios? imagina como ficaria esse diretório?

para previnir de ter um projeto desorganizado com todas as classes em apenas um diretório, a linguagem dispoe de um recruso que organiza as classes padrão e criada por nós, que conhecemos como pacote(package). Os pacotes são subdiretórios a partir da pasta src do nosso projeto, onde estão localizadas as classes da linguagem e novas que forem criadas par ao projeto. Existem algumas convenções para criação de pacotes ja utilizados no mercado.

Os pacotes são subdiretórios a partir da classe SRC do nosso projeto

Quando criamos um novo projeto em java, a pasta padrão é a pasta SRC, que por padrão qualquer classe que estiver lá, não vai precisar ter declarado que o pacote é package src; pois como é o diretório "raiz" do nosso código fonte, o java só vai colocar os packages do src em diante.

Então caso criarmos um package novo a partir de src.
src
    --- model
    
Ai a nossa classe vai ter apenas: package model;

-------------------------------------------

Modificadores de acesso

Modoficador public

Como o proprio nome representa, quando nossa classe, método e atributo é definido como public ,qualquer outra classe em qualquer outro pacote pode visualizar tais recursos.

---------------------------------

Método default, apenas o pacote da classe que foi declarado vai ter acesso



---------------------------

Enums

Emuns é um tipo especial de classe onde os objetos são previamente criados, imutáveis e disponíveis para toda aplicação

usamos enum, quando o nosso modelo de negócio contém objetos de memso contexto, que já existem de pré-estabelecidade, com a certeza de não haver alteração de valores.

Exemplos:

Grau de escolaridade: Analfabeto, fundamento, médio, Superior

Estado Civil, Solteiro, Casado, Divorciado, Viúvo

Estados brasileiro: SP, RJ, PI, MA

Não confunda uma lista de constantes com enum.

Enquanto que uma constante é uma variável de tipo com valor imutável, um enum, é um conjunto de objetos já pre-definidos na aplicação.

Como um enum é um conjunto de objetos, logo, esses objetos podem conter atributos e métodos.



public enum EstadoBrasileiro {
    SAO_PAULO("SP", "São Paulo"),
    RIO_JANEIRO("RJ", "Rio de Janeiro"),
    PIAUI("PI", "Piauí"),
    MARANHA("MA", "Maranhão");
    
    private  String nome;
    private String sigla;
    
    private EstadoBrasileiro(String sigla, String nome) {
        this.sigla = sigla;
        this.nome = nome;
    }
    
    public String getSigla() {
        return sigla;
    }
    
    public String getNome() {
        return nome;
    }
    
    public String getNomeMaiusculo() {
        return nome.toUpperCase();
    }
}

Os construtores dos enums são privados, assim o java vai a grosso modo fazer vários "news" objetos do nosso enum e deixar armazenado na memória para que possamos usar. Basicamente o construtor que agente tem dentro do enum é aquele que a gente declara os seus Atributos
Exemplo abaixo:

public enum EstadoBrasileiro {
    SAO_PAULO("SP", "São Paulo"), // basicamente já estamos chamando o construtor privado do enum aqui, e já declaramos os seus valores.
    RIO_JANEIRO("RJ", "Rio de Janeiro"),
    PIAUI("PI", "Piauí"),
    MARANHA("MA", "Maranhão");
    
    

--------------------------
UML

Linguagem dem odelagem Unificada ou UML é uma notação que possibilita a representação gráfica do projeto.

Na UML, temos tres conceitos necessários para compreendermos inicialmente:

Diagramas, elementos, relacionamento.

-------------------

As notações UML são distribuidás em duas categorias de diagramas, a estrutura e comportamental conforme listagem abaixo:

Diagramas Estruturais

    Digrama de classe: O Diagrama de classes é utilizado para fazer a representação de estruturas de classes de negócio, interfaces e outros componentes do sistema. Por esta característica, este diagrama é considerado o mais importante para a UML, pois auxilia a maioria dos demais diagramas.
    
    Diagrama de objetos: Este diagrama representa os objetos existente em um determinado isntante ou fato na aplicação. Assim, conseguimos ter uma perspectiva do estado de nossos objetos mediante a interação dos nossos usuários no sistema.
    

------------------------

Diagrama de classes

O diagrama de classes ilustra graficamente como classes serão estruturas e interligadas entre si diante da proposta do nosso software.

Em diagrama, a estrutura das classes é constituída por:

Identificação: Nome e/ou finalidade da classe

Atributos: Propriedades e/ou caracteristicas

Operações: Ações e/ou métodos

----
Relacionamentos

Em um diagrama, as classes podem existir de forma independente, mas obviamente, haverá em alguma etapa da aplicação, a necessidade de algumas se relacionarem, O que devemos compreender, é o nivel de dependencia entre ela:


Assosiação --

Uma assosiação, define um relacionamento entre duas classes, permitindo que um objeto tenha acesso a estrutura de um outro objeto.

ClasseA -----> ClasseB = Assosiação simples, navegação de A para B

ClasseA <-----> ClasseB = Assosiação Bidirecional

ClasseA <>----> ClasseB = Agregação
ClasseA <<>---> CLasseB = Composição

Agregação: Em uma agregação, a classe principal contem uma relação com outra classe, mas ela pode existir sem a classe agregadora. Imagina em um cadastro de Candidatos, podemos encontrar candidatos que ainda não possuam uma Profissão


Composição: A composição; já caracteriza uma dependencia existencial entre a classe principal e a classe associada. Imaginamos que uma Admissão só poderá existir contendo duas informações básicas e a composição do Candidato selecionado.

Admissão <<>-----Candidato = A aclasse admissao depende do Candidato, pois a classe Candidato compoe a admissão.

--------

Multiplicidade

Nem sempre um relacionamento entre as classes será de um para um, um determinado cenário poderá exigir multiplicidades específicar, conforme opções abaixo:

1. -> Representa uma associação CONTENDO UM ELEMENTO.
*. -> Representa uma associação CONTENDO UMA LISTA DE ELEMENTOS.
0..1 -> Representa uma associação CONTENDO ZERO OU UM ELEMENTO.
0..* -> Representa uma associação contendo zero ou uma lista de elementos.
1..* -> Representa uma associação contendo um ou uma lista de elementos.

---------
Visibilidade

Os atributos e métodos de uma classe podem receber níveis de visibilidade, e na UML, eistem símbolos que representam cada um deles.

(+) Visibilidade pública
(#) Visibilidade protegida (Muita associada com herança)
(-) Vissibilidade privada.

Representação.
-----------------------------------------
            Identificacao               |
-----------------------------------------
- AtributoPrivado: int                  |
# atributoProtegido: String             |
+ AtributoPublico: double               |        ---------------
---------------------------             | ----> |ClasseGenerica|
+ metodoSemRetorno(): void              |   1..* ---------------
+ metodoComRetorno(): String            |
+ metodoComParametro(param1: int): void | 
-----------------------------------------



--------------------------------------------

Pilares de POO


Quatro pilares da Orientação a Objetos

Encapsulamento: Nem tudo precisa estar visível, grande parte do nosso algoritmo pode ser distribuido em métodos, com finalidades específicas que ocmplementa uma ação em nossa aplicação.
Exemplo: Liga um veículo exige muitas etapas para a engenharia, mas o condutor so bisualiza a ignição, dar a partida e a "magia" acontece.

Herança: Características e comportamentos comuns podem ser elevados e compartilhados através de uma hierarquia de objetos.
Exemplo: um Carro e uma Motocicleta possuel Propriedades como chassi, ano de fabricação e métodos como acelerar, frear. Logo para não ser um processo de codificação redundante, podemos desfrutar da herança criando uma classe Veículo para que seja herdada por Carro e Motocicleta.

Abstração: É a indisponibilidade para determinar a lógica de um ou vários comportamentos em um objeto.
Exemplo: Veículo determina duas ações como acelerar e frear, logo, estes comportamenos deverão ser abstratos pois existem mais de uma maneira de se realizar a mesma operação.

Polimorfismo: São as inúmeras maneiras de se realizar uma mesma ação.
Exemplo: Veiculo determina duas ações como acelerar e frear, primeiramente precisamos identificar se estaremos nos referindo a Carro ou Motocicleta, Para determinar a lógica de aceleração e frenagem dos respectivos veículos.

----------------------------------------

quando estamos usando a herança e temos uma classe pai que para ser usada precisa de um construtor, precisamos que as classes filhas também tenha o construtor da nossa classe pai declarada, para que possamos usar os atributos da classe pai

---------------------------------------

Record conseguem trabalhar implementando interfaces, onde a record vai precisar obrigatóriamente implementar os métodos da interface.

As records, em contra-partida, não conseguem trabalhar com classes abstradas, pois as records só trabalham com atributos final, enquanto as classes abstratas não necessariamente tem todos seus atributos final, Devido a isso, as records permite apenas implementar as interfaces, pois as interfaces tem essa diferença da classe 

-----------------------------------------

Interfaces funcionais


a keyword default pode ser adicionada aos métodos da interface. O default foi implementado no java 8, para que você consiga gerar um método concreto dentro de uma interface, e fazer com que as implementações da interface não quebre, pois sempre que colocamos um método abstrato na intereface, as classes que estão implementando, são obrigadas a implementarem o método. Lembre-se, que as interfaces são como contratos que as classes devem seguir. Então o método default é uma forma de adicionar um método sem quebrar implementações, e também criar um método concreto dentro da interface.

Isso também, nada impede de fazermos um override do método default da interface, para que nossa classe implemente-o da maneira que quiser.

@FUncionalInterface -> essa anotação consegue ser inserida naquelas interfaces que queremos declarar como interfaces funcionais, essa anotação é mais para facilitar leitura

A interface funcional precisa ter um método normal(sem ser default), e ter quantos métodos default quiser.

----------------------------------
Quando temos uma váriavel de uma classe que é statico, esse valor vai ser compartilhado entre as instancias, então mesmo que eu crie várias intancias da mesma classe, o valor do static que eu definir vai ser a mesma referencia para todas.

Então é como se a nossa variável static é um atributo da classe em sí como entidade, e não das instancias.




